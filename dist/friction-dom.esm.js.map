{"version":3,"file":"friction-dom.esm.js","sources":["../src/lib/Surface.js","../src/lib/utils.js","../src/lib/FrictionDOM.js","../src/lib/SurfaceObject.js"],"sourcesContent":["export class Surface {\n  constructor(element, options) {\n    this.element = element;\n    this.surfaceObjects = [];\n    this.options = {\n      scale: 526, // how many px represent 1 meter\n      boundarySpring: 0.16, // spring constant N/m\n      boundarySpringDamping: 5, // N/meters/sec damping coefficient\n      boundaryPullSpring: 0.08, // spring constant N/m\n      overshoot: 0, // percentage of overshoot for programatic animations\n      paddingMinX: 0,\n      paddingMinY: 0,\n      paddingMaxX: 0,\n      paddingMaxY: 0,\n      ...(options || {}), // allow overriding defaults\n    }\n\n    this.setEdges();\n\n    window.addEventListener('resize', this.setEdges.bind(this));\n  }\n\n  getOrCall(variable) {\n    if (typeof(variable) === 'function') return variable();\n    return variable;\n  }\n\n  setEdges() {\n    const { paddingMinX, paddingMinY, paddingMaxX, paddingMaxY } = this.options;\n    this.minX = 0 + this.getOrCall(paddingMinX);\n    this.minY = 0 + this.getOrCall(paddingMinY);\n\n    if (this.element === window) {\n      this.maxX = window.innerWidth;\n      this.maxY = window.innerHeight;\n    } else {\n      this.maxX = this.element.offsetWidth;\n      this.maxY = this.element.offsetHeight;\n    }\n\n    this.maxX -= this.getOrCall(paddingMaxX);\n    this.maxY -= this.getOrCall(paddingMaxY);\n\n    this.surfaceObjects.forEach(obj => {\n      obj.goto(obj.closestSettlePoint(), 0);\n    });\n  }\n\n  get minX() { return this._minX; }\n  set minX(x) { this._minX = x; }\n  get minY() { return this._minY; }\n  set minY(y) { this._minY = y; }\n  get maxX() { return this._maxX; }\n  set maxX(x) { this._maxX = x; }\n  get maxY() { return this._maxY; }\n  set maxY(y) { this._maxY = y; }\n}","export const gravity = 9.8; // meters/sec/sec\n\nexport function toMeters(px, scale) { return px / scale };\nexport function toPixels(meters, scale) { return meters * scale };\nexport function toSeconds(milli) { return milli / 1000 }; // for verbosity...\n","import {toSeconds} from './utils';\n\nexport class FrictionDOM {\n  constructor() {\n    this.cursor = {x: 0, y: 0};\n    this.cursorLast = {...this.cursor};\n\n    this.rafStart = undefined;\n    this.rafLast = undefined;\n    this.raf = undefined;\n\n    this.draggingSurfaceObjects = [];\n    this.activeSurfaceObjects = [];\n\n    document.addEventListener('mousemove', this.move.bind(this));\n    document.addEventListener('touchmove', this.move.bind(this));\n\n    document.addEventListener('mouseup', this.endMove.bind(this));\n    document.addEventListener('touchend', this.endMove.bind(this));\n  }\n\n  addActiveSurfaceObject(obj) {\n    const found = this.activeSurfaceObjects.indexOf(obj) > -1;\n    if (!found) this.activeSurfaceObjects.push(obj);\n  }\n\n  addDraggingSurfaceObjects(obj) {\n    const found = this.draggingSurfaceObjects.indexOf(obj) > -1;\n    if (!found) this.draggingSurfaceObjects.push(obj);\n  }\n\n  beginMotion(withObject) {\n    this.rafStart = toSeconds(performance.now());\n    this.rafLast = toSeconds(performance.now());\n\n    withObject && this.addActiveSurfaceObject(withObject);\n\n    window.cancelAnimationFrame(this.raf);\n    this.raf = window.requestAnimationFrame(this.updateMotion.bind(this));\n  }\n\n  updateMotion() {\n    if (this.activeSurfaceObjects.length === 0) return;\n\n    const time = toSeconds(performance.now());\n    const timeDelta = time - this.rafLast;\n\n    for (let i = this.activeSurfaceObjects.length - 1; i >= 0; i--) {\n      this.activeSurfaceObjects[i].updateMotion(timeDelta);\n      if (this.activeSurfaceObjects[i].settled) {\n        this.activeSurfaceObjects.splice(i, 1);\n      }\n    }\n\n    this.cursorLast.x = this.cursor.x;\n    this.cursorLast.y = this.cursor.y;\n\n    this.rafLast = time;\n    this.raf = window.requestAnimationFrame(this.updateMotion.bind(this))\n  }\n\n  startMove(event, surfaceObject) {\n    this.addDraggingSurfaceObjects(surfaceObject);\n    this.addActiveSurfaceObject(surfaceObject);\n\n    if (event.targetTouches) {\n      this.cursor.x = undefined;\n      this.cursor.y = undefined;\n      this.cursorLast.x = undefined;\n      this.cursorLast.y = undefined;\n    } else {\n      this.cursorLast.x = this.cursor.x;\n      this.cursorLast.y = this.cursor.y;\n    }\n\n    this.beginMotion();\n  }\n\n  move(event) {\n    if (event.targetTouches) {\n      const {screenX, screenY} = event.targetTouches[0];\n      this.cursor.x = screenX;\n      this.cursor.y = screenY;\n    } else {\n      this.cursor.x = event.clientX;\n      this.cursor.y = event.clientY;\n    }\n  }\n\n  endMove(event) {\n    for (let i = this.draggingSurfaceObjects.length - 1; i >= 0; i--) {\n      this.draggingSurfaceObjects[i].endMove(event);\n      this.draggingSurfaceObjects.splice(i, 0);\n    }\n  }\n}\n\n// this is an internal export\nexport const app = new FrictionDOM();","import {app} from './FrictionDOM';\nimport {toMeters, toPixels, gravity} from './utils';\n\nexport class SurfaceObject {\n  constructor(element, surface, options) {\n    this.positionCallbacks = [];\n\n    this.surface = surface;\n    this.surface.surfaceObjects.push(this);\n\n    this.element = element;\n    this.element.style.position = surface.element === window ? 'fixed' : 'relative';\n\n    this.options = {\n      mass: 0.17, // kg\n      friction: 0.15, // kinetic friction of rubber and ice\n      axis: 'x,y',\n      contained: true,\n      nudgeThreshold: 0, // at what threshold should we nugle the object to an edge (don't let it float)\n      ...(options || {}), // allow overriding defaults\n    }\n\n    const axisState = {\n      acceleration: 0, // meters/sec/sec\n      velocity: 0, // meters/sec\n      position: 0, // relative position in pixels\n      settled: true,\n      hittingMin: false,\n      hittingMax: false,\n      occilationAmplitudes: [],\n    }\n\n    this.x = {...axisState};\n    this.y = {...axisState};\n\n    this.positionx = this.x.position + this.minEdge.x;\n    this.positiony = this.y.position + this.minEdge.y;\n\n    this.dragging = false;\n\n    this.element.addEventListener('mousedown', this.startMove.bind(this));\n    this.element.addEventListener('touchstart', this.startMove.bind(this));\n\n    this.boundaryCallbacks = {\n      'x-min': [],\n      'x-max': [],\n      'y-min': [],\n      'y-max': [],\n    };\n  }\n\n  get minEdge() {\n    return {\n      x: this.surface.minX,\n      y: this.surface.minY,\n    };\n  }\n\n  get maxEdge() {\n    const { contained } = this.options;\n\n    return {\n      x: this.surface.maxX - (contained ? this.element.offsetWidth : 0),\n      y: this.surface.maxY - (contained ? this.element.offsetHeight : 0),\n    };\n  }\n\n  get dragging() { return this._dragging; }\n  set dragging(d) {\n    this._dragging = d; this.element.style.cursor = d ? 'grabbing' : 'grab';\n  }\n\n  get positionx() { return this.x.position; }\n  set positionx(p) { this.x.position = p; this.element.style.left = p + 'px'; this.callPositionCallbacks(); }\n\n  get positiony() { return this.y.position; }\n  set positiony(p) { this.y.position = p; this.element.style.top = p + 'px'; this.callPositionCallbacks(); }\n\n  get settled() { return this.x.settled && this.y.settled; }\n\n  get axis() { return this.options.axis.split(','); }\n\n  resetAxis(axis) {\n    this[axis].settled = false;\n    this[axis].hittingMin = false;\n    this[axis].hittingMax = false;\n    this[axis].occilationAmplitudes = [];\n  }\n\n  startMove(event) {\n    app.startMove(event, this);\n\n    this.axis.forEach(axis => {\n      this.resetAxis(axis);\n    });\n\n    this.dragging = true;\n  }\n\n  closestSettlePoint() {\n    const settlePoint = [];\n    this.axis.forEach(axis => {\n      const { position } = this[axis];\n      if (position < this.minEdge[axis]) {\n        settlePoint.push(`${axis}-min`);\n      }\n\n      if (position > this.maxEdge[axis]) {\n        settlePoint.push(`${axis}-max`);\n      }\n    });\n\n    return settlePoint.join(',')\n  }\n\n  endMove() {\n    const { nudgeThreshold } = this.options;\n    this.dragging = false;\n\n    this.axis.forEach(axis => {\n      const { position, velocity } = this[axis];\n      const minDiff = position - this.minEdge[axis];\n      const maxDiff = this.maxEdge[axis] - position;\n\n      let outOfBounds = false;\n      if (velocity === 0 && minDiff < 0) { this[axis].velocity = -0.01; outOfBounds = true; }\n      if (velocity === 0 && maxDiff < 0) { this[axis].velocity = 0.01; outOfBounds = true; }\n      if (nudgeThreshold === 0 || outOfBounds) return; // if we are allowed to float don't worry about anything else!\n\n      const dir = velocity > 0 ? 'max' : 'min';\n      const info = {\n        min: this.goto(`${axis}-min`, 0, true),\n        max: this.goto(`${axis}-max`, 0, true),\n      };\n\n      if (Math.abs(velocity) < Math.abs(info[dir][axis])) {\n        let positionPercentage = ((this[axis].position - this.minEdge[axis]) / (this.maxEdge[axis] - this.minEdge[axis])) * 100;\n        // this is not working properly, we need to know which edge the item started \n        // closest to in order to know which to snap back to\n        const closestEdge = positionPercentage > 50 ? 'max' : 'min';\n        const opClosestEdge = positionPercentage <= 50 ? 'max' : 'min';\n        positionPercentage = positionPercentage > 50 ? 100 - positionPercentage : positionPercentage;\n        this[axis].velocity = info[positionPercentage < nudgeThreshold ? closestEdge : opClosestEdge][axis];\n      }\n    });\n\n    if (this.x.velocity === 0) this.x.settled = true;\n    if (this.y.velocity === 0) this.y.settled = true;\n  }\n\n  goto(direction, overshootOverride, justInfo) {\n    const instructions = {};\n    const info = {x: null, y: null};\n\n    direction.split(',').forEach(d => {\n      const [axis, bound] = d.split('-');\n      instructions[axis] = bound;\n    });\n\n    const { friction, mass } = this.options;\n    let { scale, overshoot } = this.surface.options;\n    if (overshootOverride !== undefined) overshoot = overshootOverride;\n    const frictionForce = friction * (mass * gravity);\n\n    const positionParts = new Map();\n    this.axis.forEach(axis => {\n      const instruction = instructions[axis];\n      if (!instruction) return;\n      positionParts.set(axis, toMeters((instruction === 'max' ? this.maxEdge[axis] : this.minEdge[axis]) - this[axis].position, scale));\n    });\n\n    this.axis.forEach(axis => {\n      const instruction = instructions[axis];\n      if (!instruction) return;\n\n      const otherAxis = axis === 'y' ? 'x' : 'y';\n      let positionDelta = positionParts.get(axis);\n      let otherPositionDelta = positionParts.get(otherAxis);\n\n      let frictionMultiplier = 1;\n      if (otherPositionDelta) {\n        frictionMultiplier = Math.abs(positionDelta)/(Math.abs(otherPositionDelta) + Math.abs(positionDelta));\n      }\n\n      if (positionDelta === 0) return;\n      positionDelta *= (1 + ((overshoot) / 100))\n\n      info[axis] = Math.sqrt(2 * ((frictionForce * frictionMultiplier) / mass) * Math.abs(positionDelta));\n      info[axis] *= positionDelta >= 0 ? 1 : -1;\n\n      if (!justInfo) {\n        this.resetAxis(axis);\n        this[axis].velocity = info[axis];\n      }\n    });\n\n    if (justInfo) return info;\n    if (!this.x.settled || !this.y.settled) app.beginMotion(this);\n  }\n\n  updateMotion(timeDelta) {\n    const { friction, mass } = this.options;\n    const { scale } = this.surface.options;\n\n    const axisCoefficients = {\n      x: (Math.abs(this.x.velocity)/(Math.abs(this.y.velocity) + Math.abs(this.x.velocity))),\n      y: (Math.abs(this.y.velocity)/(Math.abs(this.y.velocity) + Math.abs(this.x.velocity))),\n    };\n\n    this.axis.forEach(axis => {\n      if (this.dragging) {\n        let pullCoefficient = 1;\n        if (this[axis].position < this.minEdge[axis] || this[axis].position > this.maxEdge[axis]) {\n          pullCoefficient = this.surface.options.boundaryPullSpring<= this.surface.options.boundarySpring\n            ? (this.surface.options.boundaryPullSpring / this.surface.options.boundarySpring) / 2\n            : 1 - ((this.surface.options.boundarySpring / this.surface.options.boundaryPullSpring) / 2);\n        }\n\n        const positionDelta = pullCoefficient * (app.cursor[axis] === undefined || app.cursorLast[axis] === undefined ? 0 : app.cursor[axis] - app.cursorLast[axis]);\n        this[`position${axis}`] += positionDelta;\n        const newVelocity = toMeters(positionDelta, scale) / timeDelta;\n        const velocityDelta = newVelocity - this[axis].velocity;\n        this[axis].velocity = newVelocity;\n        this[axis].acceleration = velocityDelta / timeDelta;\n      } else {\n        this[`position${axis}`] += toPixels(this[axis].velocity * timeDelta, scale);\n\n        let frictionForce = friction * (mass * gravity) * (this[axis].velocity > 0 ? -1 : 1);\n        frictionForce *= axisCoefficients[axis]; // friction is inline with vector magnitude, so we need to adjust\n\n        const forces = [frictionForce]; // friction is always a thing\n\n        if (this[axis].hittingMax || (this[axis].velocity >= 0 && this[axis].position > this.maxEdge[axis])) {\n          if (!this[axis].hittingMax) this.callBoundaryCallbacks(`${axis}-max`);\n          this[axis].hittingMax = true;\n          forces.push(this.surface.options.boundarySpring * (this.maxEdge[axis] - this[axis].position)); // force of spring\n        }\n\n        if (this[axis].hittingMin || (this[axis].velocity <= 0 && this[axis].position < this.minEdge[axis])) {\n          if (!this[axis].hittingMin) this.callBoundaryCallbacks(`${axis}-min`);\n          this[axis].hittingMin = true;\n          forces.push(this.surface.options.boundarySpring * (this.minEdge[axis] - this[axis].position)); // force of spring\n        }\n\n        if (this[axis].hittingMin || this[axis].hittingMax) forces.push(this.surface.options.boundarySpringDamping * -this[axis].velocity); // force of damper\n\n        this[axis].acceleration = forces.reduce((sum, x) => sum + x, 0) / mass;\n        const newVelocity = this[axis].velocity + (this[axis].acceleration * timeDelta);\n\n        if (this[axis].hittingMin || this[axis].hittingMax && newVelocity * this[axis].velocity <= 0) {\n          this[axis].occilationAmplitudes.push(Math.abs((this[axis].hittingMax ? this.maxEdge[axis] : this.minEdge[axis]) - this[axis].position));\n        }\n\n        this[axis].velocity = newVelocity * this[axis].velocity <= 0 && !(this[axis].hittingMin || this[axis].hittingMax) ? 0 : newVelocity;\n\n        if (this[axis].occilationAmplitudes.length >= 5) {\n          let total = 0;\n          for (let i = this[axis].occilationAmplitudes.length - 1; i >= this[axis].occilationAmplitudes.length - 6; i--) {\n            total += this[axis].occilationAmplitudes[i];\n          }\n\n          if (total / 5 < 1) {\n            this[axis].velocity = 0;\n            // set position exactly as it should be on the limit\n            this[`position${axis}`] = this[axis].hittingMax ? this.maxEdge[axis] : this.minEdge[axis];\n          }\n        }\n\n        if (this[axis].velocity === 0) this[axis].settled = true;\n      }\n    });\n  }\n\n  onPositionChange(fn) {\n    this.positionCallbacks.push(fn);\n  }\n\n  // add a callback to be called when a boundary is hit\n  onBoundaryContact(boundary, fn) {\n    this.boundaryCallbacks[boundary].push(fn);\n  }\n\n  // internal funcs\n\n  callBoundaryCallbacks(boundary) {\n    this.boundaryCallbacks[boundary].forEach(fn => fn());\n  }\n\n  callPositionCallbacks() {\n    const x = this.x.position;\n    const y = this.y.position;\n    const xd = this.maxEdge.x - this.minEdge.x;\n    const yd = this.maxEdge.y - this.minEdge.y;\n    this.positionCallbacks.forEach(fn => fn({x, y, xp: (x - this.minEdge.x) / xd, yp: (y - this.minEdge.y) / yd}));\n  }\n}"],"names":[],"mappings":"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"}