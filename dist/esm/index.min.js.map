{"version":3,"file":"index.min.js","sources":["../../src/lib/Surface.ts","../../src/lib/utils.ts","../../src/lib/FrictionDOM.ts","../../src/lib/SurfaceObject.ts"],"sourcesContent":["import { Coordinate } from \"./types\";\nimport { SurfaceObject } from \"./SurfaceObject\";\n\ntype SurfacePadding = number | (() => number);\n\ntype SurfaceOptions = {\n  /**\n   * The number of px that represent 1 meter\n   */\n  scale: number,\n  /**\n   * Spring constant in N/m\n   */\n  boundarySpring: number,\n  /**\n   * N/meters/sec damping coefficient\n   */\n  boundarySpringDamping: number,\n  /**\n   * Spring constant N/m\n   */\n  boundaryPullSpring: number,\n  /**\n   * Percentage of overshoot for programtic animations\n   */\n  overshoot: number,\n  paddingMinX: SurfacePadding,\n  paddingMinY: SurfacePadding,\n  paddingMaxX: SurfacePadding,\n  paddingMaxY: SurfacePadding,\n};\n\ntype SurfaceBounds = typeof window | HTMLElement | Array<Coordinate> | string;\n\nexport class Surface {\n  element: SurfaceBounds;\n  surfaceObjects: Array<SurfaceObject>;\n  resizeTimeout: ReturnType<typeof setTimeout>;\n  options: SurfaceOptions;\n\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n\n  constructor(element: SurfaceBounds, options: Partial<SurfaceOptions>) {\n    this.element = typeof(element) === 'string' ? document.getElementById(element) : element;\n    this.surfaceObjects = [];\n    this.resizeTimeout;\n\n    this.options = {\n      scale: 526,\n      boundarySpring: 0.16,\n      boundarySpringDamping: 5,\n      boundaryPullSpring: 0.08,\n      overshoot: 0,\n      paddingMinX: 0,\n      paddingMinY: 0,\n      paddingMaxX: 0,\n      paddingMaxY: 0,\n      ...(options || {}), // allow overriding defaults\n    }\n\n    this.setEdges();\n\n    window.addEventListener('resize', this.resizeListener.bind(this));\n  }\n\n  resizeListener(): void {\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(() => {\n      this.setEdges();\n    }, 500);\n  }\n\n  parsePadding(padding: SurfacePadding): number {\n    if (typeof(padding) === 'function') return padding();\n    return padding;\n  }\n\n  setEdges(): void {\n    const { paddingMinX, paddingMinY, paddingMaxX, paddingMaxY } = this.options;\n\n    if (Array.isArray(this.element)) {\n      this.minX = this.element[0].x;\n      this.minY = this.element[0].y;\n      this.maxX = this.element[1].x;\n      this.maxY = this.element[1].y;\n    } else {\n      this.minX = 0;\n      this.minY = 0;\n\n      if (this.element === window) {\n        this.maxX = window.innerWidth;\n        this.maxY = window.innerHeight;\n      } else if (this.element instanceof HTMLElement) {\n        this.maxX = this.element.offsetWidth;\n        this.maxY = this.element.offsetHeight;\n      }\n    }\n\n    this.minX += this.parsePadding(paddingMinX);\n    this.minY += this.parsePadding(paddingMinY);\n    this.maxX -= this.parsePadding(paddingMaxX);\n    this.maxY -= this.parsePadding(paddingMaxY);\n\n    this.surfaceObjects.forEach(obj => {\n      obj.goto(obj.closestSettlePoint(), 0, false, true);\n    });\n  }\n}\n","/**\n * meters/sec/sec\n */\nexport const gravity: number = 9.8;\n\nexport function toMeters(px: number, scale: number): number { return px / scale };\nexport function toPixels(meters: number, scale: number): number { return meters * scale };\nexport function toSeconds(milli: number): number { return milli / 1000 };\n","import {Coordinate} from './types';\nimport { SurfaceObject } from './SurfaceObject';\nimport {toSeconds} from './utils';\n\n\nexport class FrictionDOM {\n  cursor: Coordinate;\n  cursorLast: Coordinate;\n\n  rafStart: number;\n  rafLast: number;\n  raf: ReturnType<typeof setInterval>;\n\n  draggingSurfaceObjects: Array<SurfaceObject>;\n  activeSurfaceObjects: Array<SurfaceObject>;\n  surfaceObjects: Array<SurfaceObject>;\n  moveCount: number;\n\n  constructor() {\n    this.moveCount = 0;\n    this.cursor = {x: 0, y: 0};\n    this.cursorLast = {...this.cursor};\n\n    this.rafStart = undefined;\n    this.rafLast = undefined;\n    this.raf = undefined;\n\n    this.draggingSurfaceObjects = [];\n    this.activeSurfaceObjects = [];\n    this.surfaceObjects = [];\n\n    document.addEventListener('mousemove', this.move.bind(this));\n    document.addEventListener('touchmove', this.move.bind(this));\n\n    document.addEventListener('mouseup', this.endMove.bind(this));\n    document.addEventListener('touchend', this.endMove.bind(this));\n  }\n\n  addActiveSurfaceObject(obj: SurfaceObject): void {\n    const found = this.activeSurfaceObjects.indexOf(obj) > -1;\n    if (!found) this.activeSurfaceObjects.push(obj);\n  }\n\n  addDraggingSurfaceObjects(obj: SurfaceObject): void {\n    const found = this.draggingSurfaceObjects.indexOf(obj) > -1;\n    if (!found) this.draggingSurfaceObjects.push(obj);\n  }\n\n  beginMotion(withObject?: SurfaceObject): void {\n    this.rafStart = toSeconds(performance.now());\n    this.rafLast = toSeconds(performance.now());\n\n    withObject && this.addActiveSurfaceObject(withObject);\n\n    window.cancelAnimationFrame(this.raf);\n    this.raf = window.requestAnimationFrame(this.updateMotion.bind(this));\n  }\n\n  updateMotion(): void {\n    if (this.activeSurfaceObjects.length === 0) return;\n\n    const time = toSeconds(performance.now());\n    const timeDelta = time - this.rafLast;\n\n    for (let i = this.activeSurfaceObjects.length - 1; i >= 0; i--) {\n      this.activeSurfaceObjects[i].updateMotion(timeDelta);\n      if (this.activeSurfaceObjects[i].settled) {\n        this.activeSurfaceObjects.splice(i, 1);\n      }\n    }\n\n    this.cursorLast.x = this.cursor.x;\n    this.cursorLast.y = this.cursor.y;\n\n    this.rafLast = time;\n    this.raf = window.requestAnimationFrame(this.updateMotion.bind(this))\n  }\n\n  startMove(preventDefault: boolean, event: TouchEvent | MouseEvent, surfaceObject: SurfaceObject): void {\n    if (preventDefault) event.preventDefault();\n\n    this.addDraggingSurfaceObjects(surfaceObject);\n    this.addActiveSurfaceObject(surfaceObject);\n\n    if (event instanceof TouchEvent) {\n      this.cursor.x = undefined;\n      this.cursor.y = undefined;\n      this.cursorLast.x = undefined;\n      this.cursorLast.y = undefined;\n    } else {\n      this.cursorLast.x = this.cursor.x;\n      this.cursorLast.y = this.cursor.y;\n    }\n\n    this.beginMotion();\n  }\n\n  move(event: TouchEvent | MouseEvent): void {\n    this.moveCount++;\n\n    if (event instanceof TouchEvent) {\n      const {screenX, screenY} = event.targetTouches[0];\n      this.cursor.x = screenX;\n      this.cursor.y = screenY;\n    } else {\n      this.cursor.x = event.clientX;\n      this.cursor.y = event.clientY;\n    }\n  }\n\n  endMove(_: TouchEvent | MouseEvent, forScrolling: boolean): void {\n    for (let i = this.draggingSurfaceObjects.length - 1; i >= 0; i--) {\n      const simulateClick: boolean = !forScrolling && this.moveCount < 5;\n      this.draggingSurfaceObjects[i].endMove(simulateClick);\n      this.draggingSurfaceObjects.splice(i, 0);\n    }\n\n    this.moveCount = 0;\n  }\n}\n\n// this is an internal export\nexport const app = new FrictionDOM();\n","import { Coordinate } from './types';\nimport {app} from './FrictionDOM';\nimport {toMeters, toPixels, gravity} from './utils';\nimport { Surface } from './Surface';\n\ntype Axis = 'x' | 'y';\ntype Boundary = 'x-min' | 'x-max' | 'y-min' | 'y-max';\n\ntype SurfaceObjectOptions = {\n  /**\n   * kg\n   */\n  mass: number,\n  friction: number,\n  axis: Axis | Array<Axis>,\n  xProp: string,\n  yProp: string,\n  contained: boolean,\n  /**\n   * At what threshold should we nudge the object to an edge\n   */\n  nudgeThreshold: number,\n  initialPosition: Boundary | Array<Boundary>,\n};\n\ntype AxisState = {\n  /**\n   * meters/sec/sec\n   */\n  acceleration: number,\n  /**\n   * meters/sec \n   */\n  velocity: number,\n  /**\n   * Relative position in pixels\n   */\n  position: number,\n  settled: boolean,\n  hittingMin: boolean,\n  hittingMax: boolean,\n  previousDisplacements: Array<number>,\n};\n\ntype BoundaryCallbacks = {\n  'x-min': Array<((() => void))>,\n  'x-max': Array<((() => void))>,\n  'y-min': Array<((() => void))>,\n  'y-max': Array<((() => void))>,\n}\n\ntype PositionDetails = {\n  /**\n   * x position as absolute pixels\n   */\n  x: number,\n  /**\n   * y position as absolute pixels\n   */\n  y: number,\n  /**\n   * x position as percentage of complete range of motion\n   */\n  xp: number,\n  /**\n   * y position as percentage of complete range of motion\n   */\n  yp: number,\n}\n\ntype GoToInfo = {\n  /**\n   * x velocity in m/s\n   */\n  x: number,\n  /**\n   * y velocity in m/s\n   */\n  y: number,\n}\n\nexport class SurfaceObject {\n  element: HTMLElement;\n  surface: Surface;\n  options: SurfaceObjectOptions;\n  x: AxisState;\n  y: AxisState;\n  currentEvent: TouchEvent | MouseEvent;\n  currentScrollLock: boolean;\n  currentScrollLockElement: HTMLElement;\n  currentScrollLockStyle: string;\n\n  boundaryCallbacks: BoundaryCallbacks;\n  positionCallbacks: Array<((details: PositionDetails) => void)>; // fill out\n\n  _dragging: boolean;\n\n  constructor(element: HTMLElement | string, surface: Surface, options: Partial<SurfaceObjectOptions>) {\n    app.surfaceObjects.push(this);\n\n    this.positionCallbacks = [];\n\n    this.surface = surface;\n    this.surface.surfaceObjects.push(this);\n\n    this.element = typeof(element) === 'string' ? document.getElementById(element) : element;\n    this.element.style.position = surface.element === window ? 'fixed' : 'relative';\n\n    this.options = {\n      mass: 0.17,\n      friction: 0.15, // kinetic friction of rubber and ice\n      axis: ['x', 'y'],\n      xProp: 'left',\n      yProp: 'top',\n      contained: true,\n      nudgeThreshold: 0,\n      initialPosition: ['x-min', 'y-min'],\n      ...(options || {}),\n    }\n\n    const axisState: AxisState = {\n      acceleration: 0,\n      velocity: 0,\n      position: 0,\n      settled: true,\n      hittingMin: false,\n      hittingMax: false,\n      previousDisplacements: [],\n    }\n\n    this.x = {...axisState};\n    this.y = {...axisState};\n\n    this.positionx = this.x.position + this.minEdge.x;\n    this.positiony = this.y.position + this.minEdge.y;\n\n    this.dragging = false;\n\n    this.element.addEventListener('mousedown', this.startMove.bind(this), {capture: true, passive: false});\n    this.element.addEventListener('touchstart', this.startMove.bind(this), {capture: true, passive: false});\n\n    this.boundaryCallbacks = {\n      'x-min': [],\n      'x-max': [],\n      'y-min': [],\n      'y-max': [],\n    };\n\n    this.goto(this.options.initialPosition, 0, false, true);\n  }\n\n  get minEdge(): Coordinate {\n    return {\n      x: this.surface.minX,\n      y: this.surface.minY,\n    };\n  }\n\n  get maxEdge(): Coordinate {\n    const { contained } = this.options;\n\n    return {\n      x: this.surface.maxX - (contained ? this.element.offsetWidth : 0),\n      y: this.surface.maxY - (contained ? this.element.offsetHeight : 0),\n    };\n  }\n\n  get dragging(): boolean { return this._dragging; }\n  set dragging(d: boolean) { this._dragging = d; }\n\n  get positionx(): number { return this.x.position; }\n  set positionx(p: number) { this.x.position = p; this.element.style[this.options.xProp] = p + 'px'; this.callPositionCallbacks(); }\n\n  get positiony(): number { return this.y.position; }\n  set positiony(p: number) { this.y.position = p; this.element.style[this.options.yProp] = p + 'px'; this.callPositionCallbacks(); }\n\n  get settled(): boolean { return this.x.settled && this.y.settled; }\n\n  get axis(): Array<Axis> {\n    return Array.isArray(this.options.axis) ? this.options.axis : [this.options.axis];\n  }\n\n  resetAxis(axis: Axis): void {\n    this[axis].settled = false;\n    this[axis].hittingMin = false;\n    this[axis].hittingMax = false;\n    this[axis].previousDisplacements = [];\n  }\n\n  startMove(event: TouchEvent | MouseEvent): void {\n    const target: HTMLElement = event.target as HTMLElement;\n\n    let curr: HTMLElement = target;\n    while (this.element.contains(curr)) {\n      const overflowY: string = window.getComputedStyle(curr).getPropertyValue('overflow-y');\n      if (curr.offsetHeight !== curr.scrollHeight && overflowY !== 'hidden') {\n        this.currentScrollLockStyle = overflowY;\n        this.currentScrollLockElement = curr;\n        this.currentScrollLock= true;\n      }\n\n      curr = curr.parentElement;\n    }\n\n    this.currentEvent = event;\n\n    app.startMove(!this.currentScrollLock, event, this);\n\n    this.axis.forEach(axis => {\n      this.resetAxis(axis);\n    });\n\n    this.dragging = true;\n  }\n\n  closestSettlePoint(): Array<Boundary> {\n    const settlePoints = [];\n    this.axis.forEach(axis => {\n      const { position } = this[axis];\n      const delta = this.maxEdge[axis] - this.minEdge[axis];\n      const percentage = (position - this.minEdge[axis]) / delta;\n      if (position < this.minEdge[axis] || percentage <= 0.5) {\n        settlePoints.push(`${axis}-min`);\n      }\n\n      if (position > this.maxEdge[axis] || percentage > 0.5) {\n        settlePoints.push(`${axis}-max`);\n      }\n    });\n\n    return settlePoints;\n  }\n\n  endMove(performEvent: boolean): void {\n    if (this.currentScrollLockElement) {\n      this.currentScrollLockElement.style.overflowY = this.currentScrollLockStyle;\n      this.currentScrollLockStyle = null;\n      this.currentScrollLockElement = null;\n      this.currentScrollLock = false;\n    }\n\n    if (this.currentEvent && performEvent) {\n      const el: HTMLElement = this.currentEvent.target as HTMLElement;\n      el.click();\n    }\n\n    this.currentEvent = null;\n\n    const { nudgeThreshold } = this.options;\n    this.dragging = false;\n\n    this.axis.forEach(axis => {\n      const { position, velocity } = this[axis];\n      const minDiff = position - this.minEdge[axis];\n      const maxDiff = this.maxEdge[axis] - position;\n\n      let outOfBounds = false;\n      if (velocity === 0 && minDiff < 0) { this[axis].velocity = -0.01; outOfBounds = true; }\n      if (velocity === 0 && maxDiff < 0) { this[axis].velocity = 0.01; outOfBounds = true; }\n      if (nudgeThreshold === 0 || outOfBounds) return; // if we are allowed to float don't worry about anything else!\n\n      const dir = velocity > 0 ? 'max' : 'min';\n      const info = {\n        min: this.goto(`${axis}-min`, 0, true),\n        max: this.goto(`${axis}-max`, 0, true),\n      };\n\n      if (Math.abs(velocity) < Math.abs(info[dir][axis])) {\n        let positionPercentage = ((this[axis].position - this.minEdge[axis]) / (this.maxEdge[axis] - this.minEdge[axis])) * 100;\n        // this is not working properly, we need to know which edge the item started \n        // closest to in order to know which to snap back to\n        const closestEdge = positionPercentage > 50 ? 'max' : 'min';\n        const opClosestEdge = positionPercentage <= 50 ? 'max' : 'min';\n        positionPercentage = positionPercentage > 50 ? 100 - positionPercentage : positionPercentage;\n        this[axis].velocity = info[positionPercentage < nudgeThreshold ? closestEdge : opClosestEdge][axis];\n      }\n    });\n\n    if (this.x.velocity === 0) this.x.settled = true;\n    if (this.y.velocity === 0) this.y.settled = true;\n  }\n\n  goto(boundary: Boundary | Array<Boundary>, overshootOverride?: number, justInfo?: boolean, instant?: boolean): void | GoToInfo {\n    const instructions = {};\n    const info: GoToInfo = {x: null, y: null};\n\n    boundary = Array.isArray(boundary) ? boundary : [boundary]\n\n    boundary.forEach(d => {\n      const [axis, dir] = d.split('-');\n      instructions[axis] = dir;\n    });\n\n    const { friction, mass } = this.options;\n    let { scale, overshoot } = this.surface.options;\n    if (overshootOverride !== undefined) overshoot = overshootOverride;\n    const frictionForce = friction * (mass * gravity);\n\n    const positionParts = new Map();\n    this.axis.forEach(axis => {\n      const instruction = instructions[axis];\n      if (!instruction) return;\n      positionParts.set(axis, toMeters((instruction === 'max' ? this.maxEdge[axis] : this.minEdge[axis]) - this[axis].position, scale));\n    });\n\n    this.axis.forEach(axis => {\n      const instruction = instructions[axis];\n      if (!instruction) return;\n\n      const otherAxis = axis === 'y' ? 'x' : 'y';\n      let positionDelta = positionParts.get(axis);\n      let otherPositionDelta = positionParts.get(otherAxis);\n\n      let frictionMultiplier = 1;\n      if (otherPositionDelta) {\n        frictionMultiplier = Math.abs(positionDelta)/(Math.abs(otherPositionDelta) + Math.abs(positionDelta));\n      }\n\n      if (positionDelta === 0) return;\n      positionDelta *= (1 + ((overshoot) / 100))\n\n      info[axis] = Math.sqrt(2 * ((frictionForce * frictionMultiplier) / mass) * Math.abs(positionDelta));\n      info[axis] *= positionDelta >= 0 ? 1 : -1;\n\n      if (!justInfo) {\n        this.resetAxis(axis);\n\n        if (instant) {\n          this[axis].position += toPixels(positionDelta, scale);\n          this[axis].velocity = 0\n        } else {\n          this[axis].velocity = info[axis];\n        }\n      }\n    });\n\n    if (justInfo) return info;\n    if (!this.x.settled || !this.y.settled) app.beginMotion(this);\n  }\n\n  updateMotion(timeDelta: number): void {\n    const { friction, mass } = this.options;\n    const { scale } = this.surface.options;\n\n    const axisCoefficients = {\n      x: (Math.abs(this.x.velocity)/(Math.abs(this.y.velocity) + Math.abs(this.x.velocity))),\n      y: (Math.abs(this.y.velocity)/(Math.abs(this.y.velocity) + Math.abs(this.x.velocity))),\n    };\n\n    let cancelMotion: boolean = false;\n\n    this.axis.forEach(axis => {\n      if (this.dragging) {\n        let pullCoefficient = 1;\n        if (this[axis].position < this.minEdge[axis] || this[axis].position > this.maxEdge[axis]) {\n          pullCoefficient = this.surface.options.boundaryPullSpring<= this.surface.options.boundarySpring\n            ? (this.surface.options.boundaryPullSpring / this.surface.options.boundarySpring) / 2\n            : 1 - ((this.surface.options.boundarySpring / this.surface.options.boundaryPullSpring) / 2);\n        }\n\n        const positionDelta = pullCoefficient * (app.cursor[axis] === undefined || app.cursorLast[axis] === undefined ? 0 : app.cursor[axis] - app.cursorLast[axis]);\n\n        // TODO: make this work for both axis\n        if (axis === 'y') {\n          if (this.currentScrollLock) {\n            const scrollableAmount = this.currentScrollLockElement.scrollHeight - this.currentScrollLockElement.offsetHeight;\n            const hittingTop = this.currentScrollLockElement.scrollTop <= 0;\n            const hittingBottom = this.currentScrollLockElement.scrollTop >= scrollableAmount;\n\n            if (\n              (hittingTop && positionDelta > 0) ||\n              (hittingBottom && positionDelta < 0)\n            ) {\n              this.currentScrollLockElement.style.overflowY = 'hidden';\n              this.currentScrollLock = false;\n            } else if (!hittingBottom && !hittingTop) {\n              cancelMotion = true;\n            }\n          }\n        }\n\n        if (!this.currentScrollLock) { // this is so we don't start moving until we know for sure we should\n          this[`position${axis}`] += positionDelta;\n          const newVelocity = toMeters(positionDelta, scale) / timeDelta;\n          const velocityDelta = newVelocity - this[axis].velocity;\n          this[axis].velocity = newVelocity;\n          this[axis].acceleration = velocityDelta / timeDelta;\n        }\n      } else {\n        this[`position${axis}`] += toPixels(this[axis].velocity * timeDelta, scale);\n\n        let frictionForce = friction * (mass * gravity) * (this[axis].velocity > 0 ? -1 : 1);\n        frictionForce *= (isNaN(axisCoefficients[axis])) ? 0 : axisCoefficients[axis]; // friction is inline with vector magnitude, so we need to adjust\n\n        const forces = [frictionForce]; // friction is always a thing\n\n        if (this[axis].hittingMax || (this[axis].velocity >= 0 && this[axis].position > this.maxEdge[axis])) {\n          if (!this[axis].hittingMax) this.callBoundaryCallbacks(`${axis}-max`);\n          this[axis].hittingMax = true;\n          forces.push(this.surface.options.boundarySpring * (this.maxEdge[axis] - this[axis].position)); // force of spring\n        }\n\n        if (this[axis].hittingMin || (this[axis].velocity <= 0 && this[axis].position < this.minEdge[axis])) {\n          if (!this[axis].hittingMin) this.callBoundaryCallbacks(`${axis}-min`);\n          this[axis].hittingMin = true;\n          forces.push(this.surface.options.boundarySpring * (this.minEdge[axis] - this[axis].position)); // force of spring\n        }\n\n        if (this[axis].hittingMin || this[axis].hittingMax) forces.push(this.surface.options.boundarySpringDamping * -this[axis].velocity); // force of damper\n\n        this[axis].acceleration = forces.reduce((sum, x) => sum + x, 0) / mass;\n        const newVelocity = this[axis].velocity + (this[axis].acceleration * timeDelta);\n\n        if (this[axis].hittingMin || this[axis].hittingMax) {\n          this[axis].previousDisplacements.push(\n            Math.abs(this[axis].hittingMax\n              ? this[axis].position - this.maxEdge[axis]\n              : this.minEdge[axis] - this[axis].position\n            )\n          );\n        }\n\n        this[axis].velocity = newVelocity * this[axis].velocity <= 0 && !(this[axis].hittingMin || this[axis].hittingMax) ? 0 : newVelocity;\n\n        if (this[axis].previousDisplacements.length >= 5) {\n          let min: number = Infinity;\n          let max: number = -Infinity;\n\n          for (let i = this[axis].previousDisplacements.length - 1; i >= this[axis].previousDisplacements.length - 6; i--) {\n            let dis = this[axis].previousDisplacements[i];\n            if (dis > max) max = dis;\n            if (dis < min) min = dis;\n          }\n\n          if (max - min < 1) {\n            this[axis].velocity = 0;\n            // set position exactly as it should be on the limit\n            this[`position${axis}`] = this[axis].hittingMax ? this.maxEdge[axis] : this.minEdge[axis];\n          }\n        }\n\n        if (this[axis].velocity === 0) this[axis].settled = true;\n      }\n    });\n\n    if (cancelMotion) {\n      app.endMove(undefined, true);\n    }\n  }\n\n  onPositionChange(fn: ((details: PositionDetails) => void)): void {\n    this.positionCallbacks.push(fn);\n    this.callPositionCallbacks();\n  }\n\n  // add a callback to be called when a boundary is hit\n  onBoundaryContact(boundary: Boundary, fn: (() => void)): void {\n    this.boundaryCallbacks[boundary].push(fn);\n  }\n\n  // internal funcs\n\n  callBoundaryCallbacks(boundary: Boundary): void {\n    this.boundaryCallbacks[boundary].forEach((fn: (() => void)): void => fn());\n  }\n\n  callPositionCallbacks() {\n    const x = this.x.position;\n    const y = this.y.position;\n    const xd = this.maxEdge.x - this.minEdge.x;\n    const yd = this.maxEdge.y - this.minEdge.y;\n    this.positionCallbacks.forEach((fn: ((details: PositionDetails) => void)) => fn({x, y, xp: (x - this.minEdge.x) / xd, yp: (y - this.minEdge.y) / yd}));\n  }\n}\n"],"names":["Surface","constructor","element","options","this","document","getElementById","surfaceObjects","resizeTimeout","Object","assign","scale","boundarySpring","boundarySpringDamping","boundaryPullSpring","overshoot","paddingMinX","paddingMinY","paddingMaxX","paddingMaxY","setEdges","window","addEventListener","resizeListener","bind","clearTimeout","setTimeout","parsePadding","padding","Array","isArray","minX","x","minY","y","maxX","maxY","innerWidth","innerHeight","HTMLElement","offsetWidth","offsetHeight","forEach","obj","goto","closestSettlePoint","toMeters","px","toPixels","meters","toSeconds","milli","app","moveCount","cursor","cursorLast","rafStart","undefined","rafLast","raf","draggingSurfaceObjects","activeSurfaceObjects","move","endMove","addActiveSurfaceObject","indexOf","push","addDraggingSurfaceObjects","beginMotion","withObject","performance","now","cancelAnimationFrame","requestAnimationFrame","updateMotion","length","time","timeDelta","i","settled","splice","startMove","preventDefault","event","surfaceObject","TouchEvent","screenX","screenY","targetTouches","clientX","clientY","_","forScrolling","simulateClick","SurfaceObject","surface","positionCallbacks","style","position","mass","friction","axis","xProp","yProp","contained","nudgeThreshold","initialPosition","axisState","acceleration","velocity","hittingMin","hittingMax","previousDisplacements","positionx","minEdge","positiony","dragging","capture","passive","boundaryCallbacks","maxEdge","_dragging","d","p","callPositionCallbacks","resetAxis","curr","target","contains","overflowY","getComputedStyle","getPropertyValue","scrollHeight","currentScrollLockStyle","currentScrollLockElement","currentScrollLock","parentElement","currentEvent","settlePoints","delta","percentage","performEvent","click","minDiff","maxDiff","outOfBounds","dir","info","min","max","Math","abs","positionPercentage","closestEdge","opClosestEdge","boundary","overshootOverride","justInfo","instant","instructions","split","frictionForce","positionParts","Map","instruction","set","otherAxis","positionDelta","get","otherPositionDelta","frictionMultiplier","sqrt","axisCoefficients","cancelMotion","pullCoefficient","scrollableAmount","hittingTop","scrollTop","hittingBottom","newVelocity","velocityDelta","isNaN","forces","callBoundaryCallbacks","reduce","sum","Infinity","dis","onPositionChange","fn","onBoundaryContact","xd","yd","xp","yp"],"mappings":"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"}