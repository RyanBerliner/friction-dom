{"version":3,"file":"index.min.js","sources":["../../src/lib/utils.ts","../../src/lib/FrictionDOM.ts","../../src/lib/Surface.ts","../../src/lib/SurfaceObject.ts"],"sourcesContent":["/**\n * meters/sec/sec\n */\nexport const gravity: number = 9.8;\n\nexport function toMeters(px: number, scale: number): number { return px / scale };\nexport function toPixels(meters: number, scale: number): number { return meters * scale };\nexport function toSeconds(milli: number): number { return milli / 1000 };\n","import {Coordinate} from './types';\nimport { SurfaceObject } from './SurfaceObject';\nimport {toSeconds} from './utils';\n\n\nexport class FrictionDOM {\n  cursor: Coordinate;\n  cursorLast: Coordinate;\n\n  rafStart: number;\n  rafLast: number;\n  raf: ReturnType<typeof setInterval>;\n\n  draggingSurfaceObjects: Array<SurfaceObject>;\n  activeSurfaceObjects: Array<SurfaceObject>;\n  surfaceObjects: Array<SurfaceObject>;\n  moveCount: number;\n\n  constructor() {\n    this.moveCount = 0;\n    this.cursor = {x: 0, y: 0};\n    this.cursorLast = {...this.cursor};\n\n    this.rafStart = undefined;\n    this.rafLast = undefined;\n    this.raf = undefined;\n\n    this.draggingSurfaceObjects = [];\n    this.activeSurfaceObjects = [];\n    this.surfaceObjects = [];\n\n    document.addEventListener('mousemove', this.move.bind(this));\n    document.addEventListener('touchmove', this.move.bind(this));\n\n    document.addEventListener('mouseup', this.endMove.bind(this));\n    document.addEventListener('touchend', this.endMove.bind(this));\n  }\n\n  addActiveSurfaceObject(obj: SurfaceObject): void {\n    const found = this.activeSurfaceObjects.indexOf(obj) > -1;\n    if (!found) this.activeSurfaceObjects.push(obj);\n  }\n\n  addDraggingSurfaceObjects(obj: SurfaceObject): void {\n    const found = this.draggingSurfaceObjects.indexOf(obj) > -1;\n    if (!found) this.draggingSurfaceObjects.push(obj);\n  }\n\n  beginMotion(withObject?: SurfaceObject): void {\n    this.rafStart = toSeconds(performance.now());\n    this.rafLast = toSeconds(performance.now());\n\n    withObject && this.addActiveSurfaceObject(withObject);\n\n    window.cancelAnimationFrame(this.raf);\n    this.raf = window.requestAnimationFrame(this.updateMotion.bind(this));\n  }\n\n  updateMotion(): void {\n    if (this.activeSurfaceObjects.length === 0) return;\n\n    const time = toSeconds(performance.now());\n    const timeDelta = time - this.rafLast;\n\n    for (let i = this.activeSurfaceObjects.length - 1; i >= 0; i--) {\n      this.activeSurfaceObjects[i].updateMotion(timeDelta);\n      if (this.activeSurfaceObjects[i].settled) {\n        this.activeSurfaceObjects.splice(i, 1);\n      }\n    }\n\n    this.cursorLast.x = this.cursor.x;\n    this.cursorLast.y = this.cursor.y;\n\n    this.rafLast = time;\n    this.raf = window.requestAnimationFrame(this.updateMotion.bind(this))\n  }\n\n  startMove(preventDefault: boolean, event: TouchEvent | MouseEvent, surfaceObject: SurfaceObject): void {\n    if (preventDefault) event.preventDefault();\n\n    this.addDraggingSurfaceObjects(surfaceObject);\n    this.addActiveSurfaceObject(surfaceObject);\n\n    if (event instanceof TouchEvent) {\n      this.cursor.x = undefined;\n      this.cursor.y = undefined;\n      this.cursorLast.x = undefined;\n      this.cursorLast.y = undefined;\n    } else {\n      this.cursorLast.x = this.cursor.x;\n      this.cursorLast.y = this.cursor.y;\n    }\n\n    this.beginMotion();\n  }\n\n  move(event: TouchEvent | MouseEvent): void {\n    this.moveCount++;\n\n    if (event instanceof TouchEvent) {\n      const {screenX, screenY} = event.targetTouches[0];\n      this.cursor.x = screenX;\n      this.cursor.y = screenY;\n    } else {\n      this.cursor.x = event.clientX;\n      this.cursor.y = event.clientY;\n    }\n  }\n\n  endMove(_: TouchEvent | MouseEvent, forScrolling: boolean): void {\n    for (let i = this.draggingSurfaceObjects.length - 1; i >= 0; i--) {\n      const simulateClick: boolean = !forScrolling && this.moveCount < 5;\n      this.draggingSurfaceObjects[i].endMove(simulateClick);\n      this.draggingSurfaceObjects.splice(i, 0);\n    }\n\n    this.moveCount = 0;\n  }\n}\n\n// this is an internal export\nexport const app = new FrictionDOM();\n","import { Coordinate } from \"./types\";\nimport { SurfaceObject } from \"./SurfaceObject\";\n\ntype SurfacePadding = number | (() => number);\n\ntype SurfaceOptions = {\n  /**\n   * The number of px that represent 1 meter\n   */\n  scale: number,\n  /**\n   * Spring constant in N/m\n   */\n  boundarySpring: number,\n  /**\n   * N/meters/sec damping coefficient\n   */\n  boundarySpringDamping: number,\n  /**\n   * Spring constant N/m\n   */\n  boundaryPullSpring: number,\n  /**\n   * Percentage of overshoot for programtic animations\n   */\n  overshoot: number,\n  paddingMinX: SurfacePadding,\n  paddingMinY: SurfacePadding,\n  paddingMaxX: SurfacePadding,\n  paddingMaxY: SurfacePadding,\n};\n\ntype SurfaceBounds = typeof window | HTMLElement | Array<Coordinate> | string;\n\nexport class Surface {\n  element: SurfaceBounds;\n  surfaceObjects: Array<SurfaceObject>;\n  resizeTimeout: ReturnType<typeof setTimeout>;\n  options: SurfaceOptions;\n\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n\n  constructor(element: SurfaceBounds, options: Partial<SurfaceOptions>) {\n    this.element = typeof(element) === 'string' ? document.getElementById(element) : element;\n    this.surfaceObjects = [];\n    this.resizeTimeout;\n\n    this.options = {\n      scale: 526,\n      boundarySpring: 0.16,\n      boundarySpringDamping: 5,\n      boundaryPullSpring: 0.08,\n      overshoot: 0,\n      paddingMinX: 0,\n      paddingMinY: 0,\n      paddingMaxX: 0,\n      paddingMaxY: 0,\n      ...(options || {}), // allow overriding defaults\n    }\n\n    this.setEdges();\n\n    window.addEventListener('resize', this.resizeListener.bind(this));\n  }\n\n  resizeListener(): void {\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(() => {\n      this.setEdges();\n    }, 500);\n  }\n\n  parsePadding(padding: SurfacePadding): number {\n    if (typeof(padding) === 'function') return padding();\n    return padding;\n  }\n\n  setEdges(): void {\n    const { paddingMinX, paddingMinY, paddingMaxX, paddingMaxY } = this.options;\n\n    if (Array.isArray(this.element)) {\n      this.minX = this.element[0].x;\n      this.minY = this.element[0].y;\n      this.maxX = this.element[1].x;\n      this.maxY = this.element[1].y;\n    } else {\n      this.minX = 0;\n      this.minY = 0;\n\n      if (this.element === window) {\n        this.maxX = window.innerWidth;\n        this.maxY = window.innerHeight;\n      } else if (this.element instanceof HTMLElement) {\n        this.maxX = this.element.offsetWidth;\n        this.maxY = this.element.offsetHeight;\n      }\n    }\n\n    this.minX += this.parsePadding(paddingMinX);\n    this.minY += this.parsePadding(paddingMinY);\n    this.maxX -= this.parsePadding(paddingMaxX);\n    this.maxY -= this.parsePadding(paddingMaxY);\n\n    this.surfaceObjects.forEach(obj => {\n      obj.goto(obj.closestSettlePoint(), 0, false, true);\n    });\n  }\n}\n","import { Coordinate } from './types';\nimport {app} from './FrictionDOM';\nimport {toMeters, toPixels, gravity} from './utils';\nimport { Surface } from './Surface';\n\ntype Axis = 'x' | 'y';\ntype Boundary = 'x-min' | 'x-max' | 'y-min' | 'y-max';\n\ntype SurfaceObjectOptions = {\n  /**\n   * kg\n   */\n  mass: number,\n  friction: number,\n  axis: Axis | Array<Axis>,\n  xProp: string,\n  yProp: string,\n  contained: boolean,\n  /**\n   * At what threshold should we nudge the object to an edge\n   */\n  nudgeThreshold: number,\n  initialPosition: Boundary | Array<Boundary>,\n};\n\ntype AxisState = {\n  /**\n   * meters/sec/sec\n   */\n  acceleration: number,\n  /**\n   * meters/sec \n   */\n  velocity: number,\n  /**\n   * Relative position in pixels\n   */\n  position: number,\n  settled: boolean,\n  hittingMin: boolean,\n  hittingMax: boolean,\n  previousDisplacements: Array<number>,\n};\n\ntype BoundaryCallbacks = {\n  'x-min': Array<((() => void))>,\n  'x-max': Array<((() => void))>,\n  'y-min': Array<((() => void))>,\n  'y-max': Array<((() => void))>,\n}\n\ntype PositionDetails = {\n  /**\n   * x position as absolute pixels\n   */\n  x: number,\n  /**\n   * y position as absolute pixels\n   */\n  y: number,\n  /**\n   * x position as percentage of complete range of motion\n   */\n  xp: number,\n  /**\n   * y position as percentage of complete range of motion\n   */\n  yp: number,\n}\n\ntype GoToInfo = {\n  /**\n   * x velocity in m/s\n   */\n  x: number,\n  /**\n   * y velocity in m/s\n   */\n  y: number,\n}\n\nexport class SurfaceObject {\n  element: HTMLElement;\n  surface: Surface;\n  options: SurfaceObjectOptions;\n  x: AxisState;\n  y: AxisState;\n  currentEvent: TouchEvent | MouseEvent;\n  currentScrollLock: boolean;\n  currentScrollLockElement: HTMLElement;\n  currentScrollLockStyle: string;\n\n  boundaryCallbacks: BoundaryCallbacks;\n  positionCallbacks: Array<((details: PositionDetails) => void)>; // fill out\n\n  _dragging: boolean;\n\n  constructor(element: HTMLElement | string, surface: Surface, options: Partial<SurfaceObjectOptions>) {\n    app.surfaceObjects.push(this);\n\n    this.positionCallbacks = [];\n\n    this.surface = surface;\n    this.surface.surfaceObjects.push(this);\n\n    this.element = typeof(element) === 'string' ? document.getElementById(element) : element;\n    this.element.style.position = surface.element === window ? 'fixed' : 'relative';\n\n    this.options = {\n      mass: 0.17,\n      friction: 0.15, // kinetic friction of rubber and ice\n      axis: ['x', 'y'],\n      xProp: 'left',\n      yProp: 'top',\n      contained: true,\n      nudgeThreshold: 0,\n      initialPosition: ['x-min', 'y-min'],\n      ...(options || {}),\n    }\n\n    const axisState: AxisState = {\n      acceleration: 0,\n      velocity: 0,\n      position: 0,\n      settled: true,\n      hittingMin: false,\n      hittingMax: false,\n      previousDisplacements: [],\n    }\n\n    this.x = {...axisState};\n    this.y = {...axisState};\n\n    this.positionx = this.x.position + this.minEdge.x;\n    this.positiony = this.y.position + this.minEdge.y;\n\n    this.dragging = false;\n\n    this.element.addEventListener('mousedown', this.startMove.bind(this), {capture: true, passive: false});\n    this.element.addEventListener('touchstart', this.startMove.bind(this), {capture: true, passive: false});\n\n    this.boundaryCallbacks = {\n      'x-min': [],\n      'x-max': [],\n      'y-min': [],\n      'y-max': [],\n    };\n\n    this.goto(this.options.initialPosition, 0, false, true);\n  }\n\n  get minEdge(): Coordinate {\n    return {\n      x: this.surface.minX,\n      y: this.surface.minY,\n    };\n  }\n\n  get maxEdge(): Coordinate {\n    const { contained } = this.options;\n\n    return {\n      x: this.surface.maxX - (contained ? this.element.offsetWidth : 0),\n      y: this.surface.maxY - (contained ? this.element.offsetHeight : 0),\n    };\n  }\n\n  get dragging(): boolean { return this._dragging; }\n  set dragging(d: boolean) { this._dragging = d; }\n\n  get positionx(): number { return this.x.position; }\n  set positionx(p: number) { this.x.position = p; this.element.style[this.options.xProp] = p + 'px'; this.callPositionCallbacks(); }\n\n  get positiony(): number { return this.y.position; }\n  set positiony(p: number) { this.y.position = p; this.element.style[this.options.yProp] = p + 'px'; this.callPositionCallbacks(); }\n\n  get settled(): boolean { return this.x.settled && this.y.settled; }\n\n  get axis(): Array<Axis> {\n    return Array.isArray(this.options.axis) ? this.options.axis : [this.options.axis];\n  }\n\n  resetAxis(axis: Axis): void {\n    this[axis].settled = false;\n    this[axis].hittingMin = false;\n    this[axis].hittingMax = false;\n    this[axis].previousDisplacements = [];\n  }\n\n  startMove(event: TouchEvent | MouseEvent): void {\n    const target: HTMLElement = event.target as HTMLElement;\n\n    let curr: HTMLElement = target;\n    while (this.element.contains(curr)) {\n      const overflowY: string = window.getComputedStyle(curr).getPropertyValue('overflow-y');\n      if (curr.offsetHeight !== curr.scrollHeight && overflowY !== 'hidden') {\n        this.currentScrollLockStyle = overflowY;\n        this.currentScrollLockElement = curr;\n        this.currentScrollLock= true;\n      }\n\n      curr = curr.parentElement;\n    }\n\n    this.currentEvent = event;\n\n    app.startMove(!this.currentScrollLock, event, this);\n\n    this.axis.forEach(axis => {\n      this.resetAxis(axis);\n    });\n\n    this.dragging = true;\n  }\n\n  closestSettlePoint(): Array<Boundary> {\n    const settlePoints = [];\n    this.axis.forEach(axis => {\n      const { position } = this[axis];\n      const delta = this.maxEdge[axis] - this.minEdge[axis];\n      const percentage = (position - this.minEdge[axis]) / delta;\n      if (position < this.minEdge[axis] || percentage <= 0.5) {\n        settlePoints.push(`${axis}-min`);\n      }\n\n      if (position > this.maxEdge[axis] || percentage > 0.5) {\n        settlePoints.push(`${axis}-max`);\n      }\n    });\n\n    return settlePoints;\n  }\n\n  endMove(performEvent: boolean): void {\n    if (this.currentScrollLockElement) {\n      this.currentScrollLockElement.style.overflowY = this.currentScrollLockStyle;\n      this.currentScrollLockStyle = null;\n      this.currentScrollLockElement = null;\n      this.currentScrollLock = false;\n    }\n\n    if (this.currentEvent && performEvent) {\n      const el: HTMLElement = this.currentEvent.target as HTMLElement;\n      el.click();\n    }\n\n    this.currentEvent = null;\n\n    const { nudgeThreshold } = this.options;\n    this.dragging = false;\n\n    this.axis.forEach(axis => {\n      const { position, velocity } = this[axis];\n      const minDiff = position - this.minEdge[axis];\n      const maxDiff = this.maxEdge[axis] - position;\n\n      let outOfBounds = false;\n      if (velocity === 0 && minDiff < 0) { this[axis].velocity = -0.01; outOfBounds = true; }\n      if (velocity === 0 && maxDiff < 0) { this[axis].velocity = 0.01; outOfBounds = true; }\n      if (nudgeThreshold === 0 || outOfBounds) return; // if we are allowed to float don't worry about anything else!\n\n      const dir = velocity > 0 ? 'max' : 'min';\n      const info = {\n        min: this.goto(`${axis}-min`, 0, true),\n        max: this.goto(`${axis}-max`, 0, true),\n      };\n\n      if (Math.abs(velocity) < Math.abs(info[dir][axis])) {\n        let positionPercentage = ((this[axis].position - this.minEdge[axis]) / (this.maxEdge[axis] - this.minEdge[axis])) * 100;\n        // this is not working properly, we need to know which edge the item started \n        // closest to in order to know which to snap back to\n        const closestEdge = positionPercentage > 50 ? 'max' : 'min';\n        const opClosestEdge = positionPercentage <= 50 ? 'max' : 'min';\n        positionPercentage = positionPercentage > 50 ? 100 - positionPercentage : positionPercentage;\n        this[axis].velocity = info[positionPercentage < nudgeThreshold ? closestEdge : opClosestEdge][axis];\n      }\n    });\n\n    if (this.x.velocity === 0) this.x.settled = true;\n    if (this.y.velocity === 0) this.y.settled = true;\n  }\n\n  goto(boundary: Boundary | Array<Boundary>, overshootOverride?: number, justInfo?: boolean, instant?: boolean): void | GoToInfo {\n    const instructions = {};\n    const info: GoToInfo = {x: null, y: null};\n\n    boundary = Array.isArray(boundary) ? boundary : [boundary]\n\n    boundary.forEach(d => {\n      const [axis, dir] = d.split('-');\n      instructions[axis] = dir;\n    });\n\n    const { friction, mass } = this.options;\n    let { scale, overshoot } = this.surface.options;\n    if (overshootOverride !== undefined) overshoot = overshootOverride;\n    const frictionForce = friction * (mass * gravity);\n\n    const positionParts = new Map();\n    this.axis.forEach(axis => {\n      const instruction = instructions[axis];\n      if (!instruction) return;\n      positionParts.set(axis, toMeters((instruction === 'max' ? this.maxEdge[axis] : this.minEdge[axis]) - this[axis].position, scale));\n    });\n\n    this.axis.forEach(axis => {\n      const instruction = instructions[axis];\n      if (!instruction) return;\n\n      const otherAxis = axis === 'y' ? 'x' : 'y';\n      let positionDelta = positionParts.get(axis);\n      let otherPositionDelta = positionParts.get(otherAxis);\n\n      let frictionMultiplier = 1;\n      if (otherPositionDelta) {\n        frictionMultiplier = Math.abs(positionDelta)/(Math.abs(otherPositionDelta) + Math.abs(positionDelta));\n      }\n\n      if (positionDelta === 0) return;\n      positionDelta *= (1 + ((overshoot) / 100))\n\n      info[axis] = Math.sqrt(2 * ((frictionForce * frictionMultiplier) / mass) * Math.abs(positionDelta));\n      info[axis] *= positionDelta >= 0 ? 1 : -1;\n\n      if (!justInfo) {\n        this.resetAxis(axis);\n\n        if (instant) {\n          this[axis].position += toPixels(positionDelta, scale);\n          this[axis].velocity = 0\n        } else {\n          this[axis].velocity = info[axis];\n        }\n      }\n    });\n\n    if (justInfo) return info;\n    if (!this.x.settled || !this.y.settled) app.beginMotion(this);\n  }\n\n  updateMotion(timeDelta: number): void {\n    const { friction, mass } = this.options;\n    const { scale } = this.surface.options;\n\n    const axisCoefficients = {\n      x: (Math.abs(this.x.velocity)/(Math.abs(this.y.velocity) + Math.abs(this.x.velocity))),\n      y: (Math.abs(this.y.velocity)/(Math.abs(this.y.velocity) + Math.abs(this.x.velocity))),\n    };\n\n    let cancelMotion: boolean = false;\n\n    this.axis.forEach(axis => {\n      if (this.dragging) {\n        let pullCoefficient = 1;\n        if (this[axis].position < this.minEdge[axis] || this[axis].position > this.maxEdge[axis]) {\n          pullCoefficient = this.surface.options.boundaryPullSpring<= this.surface.options.boundarySpring\n            ? (this.surface.options.boundaryPullSpring / this.surface.options.boundarySpring) / 2\n            : 1 - ((this.surface.options.boundarySpring / this.surface.options.boundaryPullSpring) / 2);\n        }\n\n        const positionDelta = pullCoefficient * (app.cursor[axis] === undefined || app.cursorLast[axis] === undefined ? 0 : app.cursor[axis] - app.cursorLast[axis]);\n\n        // TODO: make this work for both axis\n        if (axis === 'y') {\n          if (this.currentScrollLock) {\n            const scrollableAmount = this.currentScrollLockElement.scrollHeight - this.currentScrollLockElement.offsetHeight;\n            const hittingTop = this.currentScrollLockElement.scrollTop <= 0;\n            const hittingBottom = this.currentScrollLockElement.scrollTop >= scrollableAmount;\n\n            if (\n              (hittingTop && positionDelta > 0) ||\n              (hittingBottom && positionDelta < 0)\n            ) {\n              this.currentScrollLockElement.style.overflowY = 'hidden';\n              this.currentScrollLock = false;\n            } else if (!hittingBottom && !hittingTop) {\n              cancelMotion = true;\n            }\n          }\n        }\n\n        if (!this.currentScrollLock) { // this is so we don't start moving until we know for sure we should\n          this[`position${axis}`] += positionDelta;\n          const newVelocity = toMeters(positionDelta, scale) / timeDelta;\n          const velocityDelta = newVelocity - this[axis].velocity;\n          this[axis].velocity = newVelocity;\n          this[axis].acceleration = velocityDelta / timeDelta;\n        }\n      } else {\n        this[`position${axis}`] += toPixels(this[axis].velocity * timeDelta, scale);\n\n        let frictionForce = friction * (mass * gravity) * (this[axis].velocity > 0 ? -1 : 1);\n        frictionForce *= (isNaN(axisCoefficients[axis])) ? 0 : axisCoefficients[axis]; // friction is inline with vector magnitude, so we need to adjust\n\n        const forces = [frictionForce]; // friction is always a thing\n\n        if (this[axis].hittingMax || (this[axis].velocity >= 0 && this[axis].position > this.maxEdge[axis])) {\n          if (!this[axis].hittingMax) this.callBoundaryCallbacks(`${axis}-max`);\n          this[axis].hittingMax = true;\n          forces.push(this.surface.options.boundarySpring * (this.maxEdge[axis] - this[axis].position)); // force of spring\n        }\n\n        if (this[axis].hittingMin || (this[axis].velocity <= 0 && this[axis].position < this.minEdge[axis])) {\n          if (!this[axis].hittingMin) this.callBoundaryCallbacks(`${axis}-min`);\n          this[axis].hittingMin = true;\n          forces.push(this.surface.options.boundarySpring * (this.minEdge[axis] - this[axis].position)); // force of spring\n        }\n\n        if (this[axis].hittingMin || this[axis].hittingMax) forces.push(this.surface.options.boundarySpringDamping * -this[axis].velocity); // force of damper\n\n        this[axis].acceleration = forces.reduce((sum, x) => sum + x, 0) / mass;\n        const newVelocity = this[axis].velocity + (this[axis].acceleration * timeDelta);\n\n        if (this[axis].hittingMin || this[axis].hittingMax) {\n          this[axis].previousDisplacements.push(\n            Math.abs(this[axis].hittingMax\n              ? this[axis].position - this.maxEdge[axis]\n              : this.minEdge[axis] - this[axis].position\n            )\n          );\n        }\n\n        this[axis].velocity = newVelocity * this[axis].velocity <= 0 && !(this[axis].hittingMin || this[axis].hittingMax) ? 0 : newVelocity;\n\n        if (this[axis].previousDisplacements.length >= 5) {\n          let min: number = Infinity;\n          let max: number = -Infinity;\n\n          for (let i = this[axis].previousDisplacements.length - 1; i >= this[axis].previousDisplacements.length - 6; i--) {\n            let dis = this[axis].previousDisplacements[i];\n            if (dis > max) max = dis;\n            if (dis < min) min = dis;\n          }\n\n          if (max - min < 1) {\n            this[axis].velocity = 0;\n            // set position exactly as it should be on the limit\n            this[`position${axis}`] = this[axis].hittingMax ? this.maxEdge[axis] : this.minEdge[axis];\n          }\n        }\n\n        if (this[axis].velocity === 0) this[axis].settled = true;\n      }\n    });\n\n    if (cancelMotion) {\n      app.endMove(undefined, true);\n    }\n  }\n\n  onPositionChange(fn: ((details: PositionDetails) => void)): void {\n    this.positionCallbacks.push(fn);\n    this.callPositionCallbacks();\n  }\n\n  // add a callback to be called when a boundary is hit\n  onBoundaryContact(boundary: Boundary, fn: (() => void)): void {\n    this.boundaryCallbacks[boundary].push(fn);\n  }\n\n  // internal funcs\n\n  callBoundaryCallbacks(boundary: Boundary): void {\n    this.boundaryCallbacks[boundary].forEach((fn: (() => void)): void => fn());\n  }\n\n  callPositionCallbacks() {\n    const x = this.x.position;\n    const y = this.y.position;\n    const xd = this.maxEdge.x - this.minEdge.x;\n    const yd = this.maxEdge.y - this.minEdge.y;\n    this.positionCallbacks.forEach((fn: ((details: PositionDetails) => void)) => fn({x, y, xp: (x - this.minEdge.x) / xd, yp: (y - this.minEdge.y) / yd}));\n  }\n}\n"],"names":["toMeters","px","scale","toPixels","meters","toSeconds","milli","app","constructor","this","moveCount","cursor","x","y","cursorLast","Object","assign","rafStart","undefined","rafLast","raf","draggingSurfaceObjects","activeSurfaceObjects","surfaceObjects","document","addEventListener","move","bind","endMove","addActiveSurfaceObject","obj","indexOf","push","addDraggingSurfaceObjects","beginMotion","withObject","performance","now","window","cancelAnimationFrame","requestAnimationFrame","updateMotion","length","time","timeDelta","i","settled","splice","startMove","preventDefault","event","surfaceObject","TouchEvent","screenX","screenY","targetTouches","clientX","clientY","_","forScrolling","simulateClick","element","options","getElementById","resizeTimeout","boundarySpring","boundarySpringDamping","boundaryPullSpring","overshoot","paddingMinX","paddingMinY","paddingMaxX","paddingMaxY","setEdges","resizeListener","clearTimeout","setTimeout","parsePadding","padding","Array","isArray","minX","minY","maxX","maxY","innerWidth","innerHeight","HTMLElement","offsetWidth","offsetHeight","forEach","goto","closestSettlePoint","surface","positionCallbacks","style","position","mass","friction","axis","xProp","yProp","contained","nudgeThreshold","initialPosition","axisState","acceleration","velocity","hittingMin","hittingMax","previousDisplacements","positionx","minEdge","positiony","dragging","capture","passive","boundaryCallbacks","maxEdge","_dragging","d","p","callPositionCallbacks","resetAxis","curr","target","contains","overflowY","getComputedStyle","getPropertyValue","scrollHeight","currentScrollLockStyle","currentScrollLockElement","currentScrollLock","parentElement","currentEvent","settlePoints","delta","percentage","performEvent","click","minDiff","maxDiff","outOfBounds","dir","info","min","max","Math","abs","positionPercentage","closestEdge","opClosestEdge","boundary","overshootOverride","justInfo","instant","instructions","split","frictionForce","positionParts","Map","instruction","set","otherAxis","positionDelta","get","otherPositionDelta","frictionMultiplier","sqrt","axisCoefficients","cancelMotion","pullCoefficient","scrollableAmount","hittingTop","scrollTop","hittingBottom","newVelocity","velocityDelta","isNaN","forces","callBoundaryCallbacks","reduce","sum","Infinity","dis","onPositionChange","fn","onBoundaryContact","xd","yd","xp","yp"],"mappings":"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"}